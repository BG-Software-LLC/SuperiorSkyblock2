plugins {
    id 'java'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

group 'SuperiorSkyblock'
version = "1.6.0"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/common/' }
        maven { url 'https://repo.bg-software.com/repository/public-libs/' }
    }

    dependencies {
        compileOnly "com.bgsoftware.common.reflection:ReflectionUtils:latest"
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

repositories {
    maven { url 'https://repo.bg-software.com/repository/nms/' }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/common/' }
    maven { url 'https://repo.bg-software.com/repository/public-libs/' }

    String mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : System.getenv('mavenUsername');
    String mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : System.getenv('mavenPassword');

    if(mavenUsername != null && mavenPassword != null) {
        maven {
            url 'https://repo.bg-software.com/repository/private-libs/'
            credentials {
                username mavenUsername
                password mavenPassword
            }
        }
    }

}

dependencies {
    implementation fileTree("archive")
    implementation project(":API")

    implementation 'com.bgsoftware.common.config:CommentedConfiguration:latest'
    implementation 'com.bgsoftware.common.updater:Updater:latest'
    implementation 'com.bgsoftware.common.reflection:ReflectionUtils:latest'

    implementation 'com.zaxxer:HikariCP:latest'
    implementation 'org.slf4j:SLF4J:latest'

    // Spigot jars
    compileOnly "org.spigotmc:v1_8_R3-Taco:latest"
    compileOnly 'org.spigotmc:v1_16_R3-Tuinity:latest'

    // Plugin hooks
    compileOnly 'gcspawners:AdvancedSpawners:latest'
    compileOnly 'com.github.games647:ChangeSkin:latest'
    compileOnly 'com.zrips:CMI:latest'
    compileOnly 'net.coreprotect:CoreProtect-6:latest'
    compileOnly 'com.songoda:EpicSpawners-6:latest'
    compileOnly 'com.earth2me:Essentials-2.16:latest'
    compileOnly 'com.boydti:FastAsyncWorldEdit:latest'
    compileOnly 'me.jet315:JetsMinions:latest'
    compileOnly 'me.robin:LeaderHeads:latest'
    compileOnly 'net.luckperms:LuckPerms:latest'
    compileOnly 'net.luckperms:LuckPerms:latest'
    compileOnly 'com.vk2gpz:MergedSpawner:latest'
    compileOnly 'be.maximvdw:MVdWPlaceholderAPI:latest'
    compileOnly 'me.clip:PlaceholderAPI:latest'
    compileOnly 'skyblock.hassan:PvpingSpawners:latest'
    compileOnly 'dev.rosewood:RoseStacker:latest'
    compileOnly 'net.brcdev:ShopGUIPlus-1.20:latest'
    compileOnly 'de.candc:SilkSpawners:latest'
    compileOnly 'net.skinsrestorer:SkinsRestorer:latest'
    compileOnly 'net.skinsrestorer:SkinsRestorer14:latest'
    compileOnly 'me.mrcookieslime:Slimefun4:latest'
    compileOnly 'me.mrcookieslime:Slimefun4-Dev:latest'
    compileOnly 'de.myzelyam:SuperVanish:latest'
    compileOnly 'com.songoda:UltimateStacker:latest'
    compileOnly 'org.kitteh:VanishNoPacket:latest'
    compileOnly 'net.milkbowl:Vault:latest'
    compileOnly 'com.bgsoftware:WildStackerAPI:latest'
    compileOnly 'com.grinderwolf:SlimeWorldManager:latest'
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen {false}
    String versionNumber = System.getenv("BUILD_NUMBER") == null ? version : version + "-DEVb" + System.getenv("BUILD_NUMBER")
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', versionNumber)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + ".jar"
    }
    else{
        archiveName = rootProject.name + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete file('./archive/')
}

build {
    dependsOn shadowJar
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build